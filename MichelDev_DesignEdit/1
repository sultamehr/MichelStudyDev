//==============================================================================
// MINERvA Analysis Toolkit "Minimum Adoption" Event Loop Example
//
// "Minimum adoption" means that it only uses the two essential MAT tools:
// Universes and HistWrappers. For an "full adoption" example that additionally
// makes use of Cuts, MacroUtil, and Variable, refer to the example in
// ../MAT_Tutorial/.
//
// This script follows the canonical event-looping structure:
// Setup (I/O, variables, histograms, systematics)
// Loop events
//   loop universes
//     make cuts
//     loop variables
//       fill histograms
// Plot and Save
//==============================================================================


//PlotUtils includes
//No junk from PlotUtils please!  I already
//know that MnvH1D does horrible horrible things.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverloaded-virtual"

#include "CVUniverse.h"
#include "Systematics.h"

#include "PlotUtils/makeChainWrapper.h"
#include "PlotUtils/HistWrapper.h"

#ifndef __CINT__
#include "PlotUtils/MnvPlotter.h"
#include "PlotUtils/cuts/CCInclusiveCuts.h"
#include "PlotUtils/cuts/CCInclusiveSignal.h"
#include "Categorized.h"
#include "PlotUtils/Cutter.h"
#include "Variable.h"
#include "BestMichelDistance.h"
#include "SignalDefinition.h"
#endif //CINT
#include "Michel.h"
#include "Cluster.h"
#include "MichelEvent.h"
#include "MatchedMichel.h"

#pragma GCC diagnostic pop
#include <iostream>

class Variable;


// Histogram binning constants
const int nbins = 30;
const double xmin = 0.;
const double xmax = 20.e3;

//==============================================================================
// Cuts
//==============================================================================




//==============================================================================
// Plot
//==============================================================================
void PlotErrorSummary(PlotUtils::MnvH1D* h, std::string label) {
  PlotUtils::MnvH1D* hist = (PlotUtils::MnvH1D*)h->Clone("hist");
  PlotUtils::MnvPlotter mnv_plotter( kCompactStyle);
  TCanvas cE("c1", "c1");

  // Group GENIE bands
    mnv_plotter.error_summary_group_map.clear();
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_FrAbs_N");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_FrAbs_pi");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_FrCEx_N");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_FrCEx_pi");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_FrElas_N");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_FrElas_pi");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_FrInel_N");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_FrPiProd_N");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back(
        "GENIE_FrPiProd_pi");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_MFP_N");
    mnv_plotter.error_summary_group_map["Genie_FSI"].push_back("GENIE_MFP_pi");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_AGKYxF1pi");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_AhtBY");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_BhtBY");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_CCQEPauliSupViaKF");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_CV1uBY");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_CV2uBY");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_EtaNCEL");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_MaNCEL");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_MaRES");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_MvRES");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_NormDISCC");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_NormNCRES");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_RDecBR1gamma");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_Rvn1pi");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_Rvn2pi");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_Rvn3pi");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_Rvp1pi");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_Rvp2pi");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_Theta_Delta2Npi");
    mnv_plotter.error_summary_group_map["Genie_InteractionModel"].push_back(
        "GENIE_VecFFCCQEshape");

    mnv_plotter.error_summary_group_map["RPA"].push_back("RPA_HighQ2");
    mnv_plotter.error_summary_group_map["RPA"].push_back("RPA_LowQ2");

  const bool do_fractional_uncertainty = true;
  const bool do_cov_area_norm = false;
  const bool include_stat_error = false;
  const std::string do_fractional_uncertainty_str =
      do_fractional_uncertainty ? std::string("Frac") : std::string("Abs");
  const std::string do_cov_area_norm_str =
      do_cov_area_norm ? std::string("CovAreaNorm") : std::string("");

  mnv_plotter.DrawErrorSummary(hist, "TR", include_stat_error, true,
                              0.0, do_cov_area_norm, "",
                              do_fractional_uncertainty);
  mnv_plotter.AddHistoTitle("Event Selection");
  std::string plotname =
      Form("ErrorSummary_%s_%s_%s", do_fractional_uncertainty_str.c_str(),
           do_cov_area_norm_str.c_str(), label.c_str());
  mnv_plotter.MultiPrint(&cE, plotname, "png");
}

void PlotCVAndError(PlotUtils::MnvH1D* h, std::string label) {
  PlotUtils::MnvH1D* hist = (PlotUtils::MnvH1D*)h->Clone("hist");
  PlotUtils::MnvPlotter mnv_plotter(PlotUtils::kCCNuPionIncStyle);
  TCanvas cE("c1", "c1");
  if (!gPad)
    throw std::runtime_error("Need a TCanvas. Please make one first.");
  PlotUtils::MnvH1D* datahist = new PlotUtils::MnvH1D(
      "adsf", "", nbins, xmin, xmax);
  bool statPlusSys = true;
  int mcScale = 1.;
  bool useHistTitles = false;
  const PlotUtils::MnvH1D* bkgdHist = NULL;
  const PlotUtils::MnvH1D* dataBkgdHist = NULL;
  mnv_plotter.DrawDataMCWithErrorBand(datahist, hist, mcScale, "TL",
                                     useHistTitles, NULL, NULL, false,
                                     statPlusSys);
  mnv_plotter.AddHistoTitle("Event Selection");
  std::string plotname = Form("CV_w_err_%s", label.c_str());
  mnv_plotter.MultiPrint(&cE, plotname, "png");
  delete datahist;
}

#ifndef __CINT__
//==============================================================================
// Loop and Fill
//==============================================================================
void LoopAndFillEventSelection(
    PlotUtils::ChainWrapper* chain,
    std::map<std::string, std::vector<CVUniverse*> > error_bands,
    std::vector<Variable*> vars,
    PlotUtils::Cutter<CVUniverse, MichelEvent>& michelcuts)
    //util::Categorized<PlotUtils::HistWrapper<CVUniverse>, int> hw_bestpirange) //,PlotUtils::HistWrapper<CVUniverse> hw_emu)
    {
    for (int i=0; i<chain->GetEntries(); ++i) {
    if(i%1000==0) std::cout << (i/1000) << "k " << std::flush;


    int isSignal = 0;
    
    //=========================================
    // Systematics loop(s)
    //=========================================
    for (auto band : error_bands) {
      std::vector<CVUniverse*> error_band_universes = band.second;
      for (auto universe : error_band_universes) {
         MichelEvent myevent; // make sure your event is inside the error band loop. 
    
        // Tell the Event which entry in the TChain it's looking at
        universe->SetEntry(i);
        
        // THis is where you would Access/create a Michel
        //TODO: if(PassesCuts(universe))?
        if (universe->Getq3() > 1.2) continue;
         //std::cout<< "  q3 for the event is " << universe->Getq3() << std::fl;

          int nmichels = universe->GetNMichels();
          
          //std::vector<Michel*> eventmichels = universe->CreateMichels();
         
          //Michel* m = new Michel(*universe, 0);
          
          //This is the function for filling all the Michel info.
          
          double min_dist = 9999.;
          std::vector<Michel*> return_michels;
          int best_michel = -1;
          for (int i = 0; i < nmichels; ++i)
          {
            Michel* current_michel = new Michel(*universe, i);
            if (current_michel->is_fitted != 1) continue;
            
            //std::cout << "Getting Michel Vtx Match " << std::endl;
            current_michel->DoesMichelMatchVtx(*universe, current_michel);
            //std::cout << "Getting Michel Cluster Match " << std::endl;
            current_michel->DoesMichelMatchClus(*universe, current_michel);
            //std::cout << "Getting Best Michel Match " << std::endl;

            current_michel->GetBestMatch(current_michel);
            //std::cout << "Best Match for this michel is " << current_michel->BestMatch << std::endl;
            
            //std::cout << "INITIALIZED CURRENT MICHEL " << i << std::endl;
            //std::cout << "Filling container of Michel for the event." << std::endl;

            double dist = current_michel->Best3Ddist;
              if (dist <= min_dist) {
              min_dist = dist;
              best_michel = i;
              }
              
            return_michels.push_back(current_michel);
            delete current_michel;
          }
	
          myevent.m_bestdist = min_dist;
          if (return_michels.size() == 0) continue; 

          //std::cout << "Best Michel Distance is " << min_dist << std::endl;
          
          if (!michelcuts.isMCSelected(*universe, myevent, 1).all()) continue; //all is another function that will later help me with sidebands

          //For each Variable
          //if(best_michel != -1) //Equivalent to if (return_michels.size() == 0) continue;
        
          for(auto& var: vars)
          {
            (*var->m_bestPionByGENIELabel)[universe->GetInteractionType()].FillUniverse(universe, var->GetRecoValue(*universe, best_michel), universe->GetWeight());
            //Fill other per-Variable histograms here
            
          }
          
        //=========================================
        // Cuts in each universe
        //=========================================
        //if(PassesCuts(*universe)) {
        //  hw_emu.univHist(universe)->Fill(universe->GetEmu(), 
                                        //  universe->GetWeight());
          
        //} // End if passed cuts
      } // End band's universe loop
    } // End Band loop
    
    //if (isSignal == 1) std::cout << "THIS EVENT HAS A SIGNAL MICHEL " << std::endl;

  } //End entries loop
}


void LoopAndFillEffDenom( PlotUtils::ChainWrapper* truth,
    				std::map<std::string, std::vector<CVUniverse*> > truth_bands,
    				std::vector<Variable*> vars,
    				PlotUtils::Cutter<CVUniverse, MichelEvent>& michelcuts)
{
    for (int i=0; i<truth->GetEntries(); ++i) {
      if(i%1000==0) std::cout << (i/1000) << "k " << std::flush;


      
      //=========================================
      // Systematics loop(s)
      //=========================================
      for (auto band : truth_bands) {
        std::vector<CVUniverse*> truth_band_universes = band.second;
        for (auto universe : truth_band_universes) {
      
          // Tell the Event which entry in the TChain it's looking at
          universe->SetEntry(i);

          if (!michelcuts.isEfficiencyDenom(*universe, 1)) continue; 
          //Fill efficiency denominator now: 
          //TODO ADD PLOTS
	  
          

	}

      }

    }
}




#endif // __CINT__
//==============================================================================
// Main
//==============================================================================
void testEventLoop() {
  TH1::AddDirectory(false);
  // Make a chain of events
  PlotUtils::ChainWrapper* chain = makeChainWrapperPtr("playlist_mc.txt", 
                                                       "CCQENu");
  PlotUtils::ChainWrapper* truth = makeChainWrapperPtr("playlist_mc.txt",
						       "Truth");
  // You're required to make some decisions
  PlotUtils::MinervaUniverse::SetNuEConstraint(false);
  PlotUtils::MinervaUniverse::SetPlaylist("minervame1A");
  PlotUtils::MinervaUniverse::SetAnalysisNuPDG(14);
  PlotUtils::MinervaUniverse::SetNonResPiReweight(false);
  PlotUtils::MinervaUniverse::SetDeuteriumGeniePiTune(false);

  // Make a map of systematic universes
  std::map< std::string, std::vector<CVUniverse*> > error_bands = 
      GetStandardSystematics(chain);

  std::map< std::string, std::vector<CVUniverse*> > truth_bands =
      GetStandardSystematics(truth);

  //ExclusiveVariable1Arg<CVUniverse, Variable> is there to forward a Michel index
  //to CVUniverse::GetPionKE().  It derives from Variable and thus has the
  //histogram(s) you want to fill.
  std::vector<Variable*> vars = { 
  new ExclusiveVariable1Arg<CVUniverse, Variable>("tpi", "T#pi [MeV]", 100, 0., 1., &CVUniverse::GetPionKE, &CVUniverse::GetPionKE)
  };
  
  //new ExclusiveVariable1Arg<CVUniverse, Variable>("pionrange", 100, 0., 2400, &Michel::Best3Ddist, &CVUniverse::Best3Ddist)
  
  //using namespace PlotUtils;

  for(auto& var: vars) var->InitializeMCHists(error_bands);

  PlotUtils::Cutter<CVUniverse, MichelEvent>::reco_t sidebands;
  auto precuts = reco::GetCCInclusive2DCuts<CVUniverse, MichelEvent>();
  precuts.emplace_back(new BestMichelDistance<CVUniverse, MichelEvent>(102.));

  auto signalDefinition = truth::GetCCInclusive2DSignal<CVUniverse>();
  //signalDefinition.emplace_back(new Q3Limit<CVUniverse>(1.2));

  PlotUtils::Cutter<CVUniverse, MichelEvent> mycuts(std::move(precuts), std::move(sidebands) , std::move(signalDefinition),std::move(truth::GetCCInclusive2DPhaseSpace<CVUniverse>()));
  // Loop entries and fill
  LoopAndFillEventSelection(chain, error_bands, vars, mycuts);

  LoopAndFillEffDenom(truth, truth_bands, vars, mycuts);

  #ifndef __CINT__ //For "auto" c++11 feature because Andrew is lazy.  Added some lambda function action later.
  for(auto& var: vars)
  {
    // You must always sync your HistWrappers before plotting them
    var->SyncCVHistos();

    //Categorized makes sure GetTitle() is the same as the labels you were looping over before
    var->m_bestPionByGENIELabel->visit([](PlotUtils::HistWrapper<CVUniverse>& categ)
                                       {
                                         PlotCVAndError(categ.hist, categ.hist->GetTitle());
                                         PlotErrorSummary(categ.hist, categ.hist->GetTitle());
                                       });
  }
  #endif //__CINT__

  std::cout << mycuts << std::endl; 
  std::cout << "Success" << std::endl;
}
/*
void CreateMichels(CVUnivere &univ,std::vector<Michel*> &return_michels){
  unsigned int nmichels = univ->GetNMichels();
  for (unsigned int i = 0; i < nmichels; ++i)
  {
    Michel* current_michel = new Michel(univ, i);
    if (current_michel->is_fitted != 1) continue;
    current_michel->DoesMichelMatchVtx(univ, current_michel);
    current_michel->DoesMichelMatchClus(univ, current_michel);
    return_michels.push_back(current_michel);
  }
  return return_michels;
}

*/
